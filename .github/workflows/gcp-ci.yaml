---
name: CI Testing - Deploy and Destroy Beranode
on:
  push:
    branches: main
  pull_request:
    types:
      - opened
      - synchronize
  schedule:
    - cron: "0 1 * * 0"
  workflow_dispatch:
    inputs:
      GCP_PROJECT:
        description: "The GCP project ID to run the playbook against"
        required: false
      GCP_REGION:
        description: "The region where the infrastructure will be created"
        required: false
        default: "us-central1"
      NAME:
        description: "The name to prefix all resources with"
        required: false
        default: "rnodec-bera"
      MACHINE_TYPE:
        description: "The gcp instance type to use"
        required: false
        default: "n1-standard-2"

env:
  GCP_PROJECT: ${{ github.event.inputs.GCP_PROJECT || vars.GCP_PROJECT }}
  NAME: ${{ github.event.inputs.NAME || 'rnodec-bera' }}
  GCP_REGION: ${{ github.event.inputs.GCP_REGION || 'us-central1' }}
  MACHINE_TYPE: ${{ github.event.inputs.MACHINE_TYPE || 'n1-standard-2'}}

jobs:
  ansible-playbook:
    name: Run playbook
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies Including Ansible
        run: |
          python -m pip install --upgrade pip
          pip3 install ansible
          ansible-galaxy role install RnodeC.beranode
          ansible-galaxy collection install -U community.general

      - name: Log versions
        run: |
          ansible --version
          terraform version

      - name: Set up GCP credentials
        env:
          GCP_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}
        run: |
          echo "$GCP_CREDENTIALS" > gcp_credentials.json
          echo "GCP_CREDENTIALS_FILE=$(pwd)/gcp_credentials.json" >> $GITHUB_ENV

      - name: Set up SSH Key
        env:
          SSH_KEY: ${{ secrets.SSH_KEY }}
          SSH_PUBKEY: ${{ vars.SSH_PUBKEY }}
        run: |
          echo "$SSH_KEY" > id_rsa
          echo "$SSH_PUBKEY" > id_rsa.pub
          chmod 0600 id_rsa
          echo "SSH_KEY_FILE=$(pwd)/id_rsa" >> $GITHUB_ENV
          echo "SSH_PUBKEY_FILE=$(pwd)/id_rsa.pub" >> $GITHUB_ENV

      - name: Set up ansible-vars
        run: |
          cat << EOF > ansible-vars.yaml
          ansible_user: ${{ vars.ANSIBLE_USER }}
          ansible_ssh_private_key_file: ${{ env.SSH_KEY_FILE }}
          tfvars:
            GCP_PROJECT: ${{ env.GCP_PROJECT }}
            GCP_REGION: ${{ env.GCP_REGION }}
            GCP_CREDENTIALS_FILE: ${{ env.GCP_CREDENTIALS_FILE }}
            NAME: ${{ env.NAME }}
            MACHINE_TYPE: ${{ env.MACHINE_TYPE }}
          EOF
          cat ansible-vars.yaml
            
          cat << EOF > "terraform/terraform.tfvars"
          gcp_project = "${{ env.GCP_PROJECT }}"
          gcp_region = "${{ env.GCP_REGION }}"
          gcp_credentials_file = "${{ env.GCP_CREDENTIALS_FILE }}"
          name = "${{ env.NAME }}"
          machine_type = "${{ env.MACHINE_TYPE }}"
          EOF
          cat terraform/terraform.tfvars

      - name: Terraform Init
        working-directory: terraform/
        run: terraform init
        
      - name: Terraform Plan
        working-directory: terraform/
        run: terraform plan -out=tfplan -var-file terraform.tfvars
        
      - name: Terraform Apply
        working-directory: terraform/
        run: terraform apply -auto-approve -input=false tfplan    
        
      - name: Terraform Destroy
        working-directory: terraform/
        run: |
          terraform destroy -auto-approve

      - name: Run ansible playbook to create and configure infrastructure
        run: |
          ansible-playbook playbook.yaml -e @ansible-vars.yaml -vvv

      - name: Run ansible playbook to destroy infrastructure
        working-directory: terraform/
        run: |
          ansible-playbook playbook.yaml -e @ansible-vars.yaml --tags down

      - name: Purge GCP Credentials and SSH Key
        if: always()
        run: |
          rm -f ${{ env.GCP_CREDENTIALS_FILE }}
          rm -f ${{ env.SSH_KEY_FILE }}
          rm -f ansible-vars.yaml
