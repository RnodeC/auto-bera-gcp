---
- name: Create VM infrastructure in GCP with Terraform
  hosts: localhost
  connection: local
  gather_facts: false

  tasks:
    - debug: msg="{{ tfvars | lower }}"

    - name: Initialize Terraform
      command: terraform init
      args:
        chdir: terraform/

    - name: Run Terraform plan
      command: terraform plan -out=tfplan -var-file terraform.tfvars
      args:
        chdir: terraform/
    
    - name: Apply Terraform changes
      command: terraform apply -auto-approve -input=false tfplan 
      args:
        chdir: terraform/

    - name: Get Terraform outputs
      ansible.builtin.command: terraform output -json
      args:
        chdir: terraform/
      register: terraform_outputs

    - name: Set fact for Terraform outputs
      ansible.builtin.set_fact:
        tf_outputs: "{{ terraform_outputs.stdout | from_json }}"

    - name: Add instance to inventory
      ansible.builtin.add_host:
        name: "{{ tf_outputs.instance_ip_address.value }}"
        groups: nodes

- name: Wait for instance to become ready
  hosts: nodes
  gather_facts: false
  vars:
    ansible_ssh_common_args: "-o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no"

  tasks:
    - name: Wait for connection
      ansible.builtin.wait_for_connection:
        delay: 10
        timeout: 300

- name: Configure instance with ansible
  hosts: nodes
  vars:
    ansible_ssh_common_args: "-o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no"

  roles:
    - RnodeC.beranode

- name: Destroy VM infrastructure in GCP with Terraform
  hosts: localhost
  connection: local
  gather_facts: false
  tags: ['never', 'down']

  tasks:
    - name: Terraform Destroy
      community.general.terraform:
        state: absent
        project_path: terraform/
        variables: "{{ tfvars | lower }}"
